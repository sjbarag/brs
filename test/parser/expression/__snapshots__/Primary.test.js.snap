// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parser primary expressions parses expressions in parentheses 1`] = `
Array [
  Assignment {
    "name": Object {
      "isReserved": false,
      "kind": "Identifier",
      "literal": undefined,
      "location": Object {
        "end": Object {
          "column": -9,
          "line": -9,
        },
        "start": Object {
          "column": -9,
          "line": -9,
        },
      },
      "text": "_",
    },
    "tokens": Object {
      "equals": Object {
        "isReserved": false,
        "kind": "Equal",
        "literal": undefined,
        "location": Object {
          "end": Object {
            "column": -9,
            "line": -9,
          },
          "start": Object {
            "column": -9,
            "line": -9,
          },
        },
        "text": "=",
      },
    },
    "type": "Assignment",
    "value": Binary {
      "left": Literal {
        "_location": Object {
          "end": Object {
            "column": -9,
            "line": -9,
          },
          "start": Object {
            "column": -9,
            "line": -9,
          },
        },
        "type": "Literal",
        "value": Int32 {
          "kind": 4,
          "value": 1,
        },
      },
      "right": Grouping {
        "expression": Binary {
          "left": Literal {
            "_location": Object {
              "end": Object {
                "column": -9,
                "line": -9,
              },
              "start": Object {
                "column": -9,
                "line": -9,
              },
            },
            "type": "Literal",
            "value": Int32 {
              "kind": 4,
              "value": 2,
            },
          },
          "right": Literal {
            "_location": Object {
              "end": Object {
                "column": -9,
                "line": -9,
              },
              "start": Object {
                "column": -9,
                "line": -9,
              },
            },
            "type": "Literal",
            "value": Int32 {
              "kind": 4,
              "value": 3,
            },
          },
          "token": Object {
            "isReserved": false,
            "kind": "Star",
            "literal": undefined,
            "location": Object {
              "end": Object {
                "column": -9,
                "line": -9,
              },
              "start": Object {
                "column": -9,
                "line": -9,
              },
            },
            "text": "*",
          },
          "type": "Binary",
        },
        "tokens": Object {
          "left": Object {
            "isReserved": false,
            "kind": "LeftParen",
            "literal": undefined,
            "location": Object {
              "end": Object {
                "column": -9,
                "line": -9,
              },
              "start": Object {
                "column": -9,
                "line": -9,
              },
            },
            "text": "(",
          },
          "right": Object {
            "isReserved": false,
            "kind": "RightParen",
            "literal": undefined,
            "location": Object {
              "end": Object {
                "column": -9,
                "line": -9,
              },
              "start": Object {
                "column": -9,
                "line": -9,
              },
            },
            "text": ")",
          },
        },
        "type": "Grouping",
      },
      "token": Object {
        "isReserved": false,
        "kind": "Plus",
        "literal": undefined,
        "location": Object {
          "end": Object {
            "column": -9,
            "line": -9,
          },
          "start": Object {
            "column": -9,
            "line": -9,
          },
        },
        "text": "+",
      },
      "type": "Binary",
    },
  },
]
`;

exports[`parser primary expressions parses numeric literals 1`] = `
Array [
  Assignment {
    "name": Object {
      "isReserved": false,
      "kind": "Identifier",
      "literal": undefined,
      "location": Object {
        "end": Object {
          "column": -9,
          "line": -9,
        },
        "start": Object {
          "column": -9,
          "line": -9,
        },
      },
      "text": "_",
    },
    "tokens": Object {
      "equals": Object {
        "isReserved": false,
        "kind": "Equal",
        "literal": undefined,
        "location": Object {
          "end": Object {
            "column": -9,
            "line": -9,
          },
          "start": Object {
            "column": -9,
            "line": -9,
          },
        },
        "text": "=",
      },
    },
    "type": "Assignment",
    "value": Literal {
      "_location": Object {
        "end": Object {
          "column": -9,
          "line": -9,
        },
        "start": Object {
          "column": -9,
          "line": -9,
        },
      },
      "type": "Literal",
      "value": Int32 {
        "kind": 4,
        "value": 5,
      },
    },
  },
]
`;

exports[`parser primary expressions parses string literals 1`] = `
Array [
  Assignment {
    "name": Object {
      "isReserved": false,
      "kind": "Identifier",
      "literal": undefined,
      "location": Object {
        "end": Object {
          "column": -9,
          "line": -9,
        },
        "start": Object {
          "column": -9,
          "line": -9,
        },
      },
      "text": "_",
    },
    "tokens": Object {
      "equals": Object {
        "isReserved": false,
        "kind": "Equal",
        "literal": undefined,
        "location": Object {
          "end": Object {
            "column": -9,
            "line": -9,
          },
          "start": Object {
            "column": -9,
            "line": -9,
          },
        },
        "text": "=",
      },
    },
    "type": "Assignment",
    "value": Literal {
      "_location": Object {
        "end": Object {
          "column": -9,
          "line": -9,
        },
        "start": Object {
          "column": -9,
          "line": -9,
        },
      },
      "type": "Literal",
      "value": BrsString {
        "kind": 3,
        "value": "hello",
      },
    },
  },
]
`;
